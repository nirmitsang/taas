# =======================================================
# FILE: platform-taas/taas-universal.yml
# Universal TaaS pipeline
# =======================================================
stages:
  - quality
  - test

variables:
  SONAR_PROJECT_KEY: "default_project"
  SONAR_HOST_URL: "https://sonarqube.barclays.intranet"
  SONAR_TOKEN: $SONAR_TOKEN

before_script:
  - |
    if [ -n "$REPO_URL" ]; then
      echo "Central/Direct mode detected: cloning repo..."
      git clone --branch $BRANCH $REPO_URL app_repo
      cd app_repo/$TEST_PATH
    else
      echo "Embedded mode detected: running inside current repo..."
      cd $CI_PROJECT_DIR/$TEST_PATH
    fi
  - echo "Resolved test path: $(pwd)"
  - FULL_BUILDER_IMAGE="BUILDER_IMAGE_$BUILDER_IMAGE"
  - echo "Using builder image: $FULL_BUILDER_IMAGE"

# SonarQube scan
sonarqube-scan:
  stage: quality
  image: $FULL_BUILDER_IMAGE
  script:
    - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
  artifacts:
    expire_in: 1 week
    paths:
      - sonar-report/

# Test job template
run-tests:
  stage: test
  image: $FULL_BUILDER_IMAGE
  script:
    - echo "Running $TEST_TYPE tests in $TEST_PATH using $BUILDER_IMAGE"
    - |
      if [ "$TEST_TYPE" = "functional" ]; then
        pytest --junitxml=junit-report.xml
      elif [ "$TEST_TYPE" = "performance" ]; then
        echo "Running performance tests..."
        python test_perf_dummy.py
      elif [ "$TEST_TYPE" = "security" ]; then
        echo "Running security tests..."
      else
        echo "Unknown TEST_TYPE: $TEST_TYPE"
        exit 1
      fi
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - junit-report.xml
      - allure-results/

# =======================================================
# FILE: demo-app/.gitlab-ci.yml
# Embedded mode example
# =======================================================
stages:
  - quality
  - test

include:
  - project: 'platform/taas'
    file: 'taas-universal.yml'

functional-tests:
  variables:
    TEST_TYPE: "functional"
    TEST_PATH: "tests/functional"
    BUILDER_IMAGE: "PYTHON_39"

performance-tests:
  variables:
    TEST_TYPE: "performance"
    TEST_PATH: "tests/performance"
    BUILDER_IMAGE: "PYTHON_39"

# =======================================================
# FILE: demo-app/app/calculator.py
# Simple demo app
# =======================================================
def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

def multiply(a, b):
    return a * b

def divide(a, b):
    if b == 0:
        raise ValueError("Division by zero not allowed")
    return a / b

# =======================================================
# FILE: demo-app/tests/functional/test_calculator.py
# Functional tests
# =======================================================
import pytest
from app.calculator import add, subtract, multiply, divide

def test_add():
    assert add(2, 3) == 5
    assert add(-1, 1) == 0

def test_subtract():
    assert subtract(5, 3) == 2
    assert subtract(0, 5) == -5

def test_multiply():
    assert multiply(2, 3) == 6
    assert multiply(-2, 4) == -8

def test_divide():
    assert divide(6, 3) == 2
    with pytest.raises(ValueError):
        divide(5, 0)

# =======================================================
# FILE: demo-app/tests/performance/test_perf_dummy.py
# Dummy performance test
# =======================================================
import time

def test_dummy_perf():
    start = time.time()
    total = sum(range(1000000))
    end = time.time()
    elapsed = end - start
    print(f"Elapsed time for summing 1 million numbers: {elapsed:.4f} seconds")
    assert elapsed < 1






    stages:
  - quality
  - test

# Include the universal TaaS pipeline template
include:
  - local: 'taas-universal.yml'

# This is a "dummy" job to make GitLab trigger the universal pipeline
trigger-taas:
  stage: test
  script:
    - echo "Triggering TaaS pipeline for repo: $REPO_URL, branch: $BRANCH"
    - echo "Test path: $TEST_PATH, Test type: $TEST_TYPE, Builder image: $BUILDER_IMAGE"
  # Job will automatically run the universal jobs defined in taas-universal.yml

